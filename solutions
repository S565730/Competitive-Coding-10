## Problem 1

class Solution {
    public int maxProfit(int[] prices) {
        int maxProfit = 0;

        for (int i = 1; i < prices.length; i++) {
            if (prices[i] > prices[i - 1]) {
                maxProfit += prices[i] - prices[i - 1];
            }
        }

        return maxProfit;
    }
}




## Problem 2


class PeekingIterator implements Iterator<Integer> {



    private Integer next = null;

    private Iterator<Integer> itr = null;



	public PeekingIterator(Iterator<Integer> iterator) {

	    // initialize any member here.

        this.itr = iterator;

        next();	    

	}



    // Returns the next element in the iteration without advancing the iterator.

	public Integer peek() {

        return next;

	}



	// hasNext() and next() should behave the same as in the Iterator interface.

	// Override them if needed.

	@Override

	public Integer next() {

	    Integer returnValue = next;

        next = null;

        if(itr != null && itr.hasNext()){

            next = itr.next();

        }

        return returnValue;

	}



	@Override

	public boolean hasNext() {

	    return next != null;

	}

}

